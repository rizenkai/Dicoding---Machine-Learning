# -*- coding: utf-8 -*-
"""[Clustering] Submission Akhir BMLP_Mochamad Masdarul Anwar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cQuKfPM5wRC1o7YZDrDfI8MGO73id6DN

# **1. Perkenalan Dataset**

Tahap pertama, Anda harus mencari dan menggunakan dataset **tanpa label** dengan ketentuan sebagai berikut:

1. **Sumber Dataset**:  
   https://www.kaggle.com/datasets/onydrive/diets-nutrition-dataset
   
2. **Ketentuan Dataset**:
   - **Tanpa label**: Dataset tidak boleh memiliki label atau kelas.
   - **Jumlah Baris**: Minimal 1000 baris untuk memastikan dataset cukup besar untuk analisis yang bermakna.
   - **Tipe Data**: Harus mengandung data **kategorikal** dan **numerikal**.
     - *Kategorikal*: Misalnya jenis kelamin, kategori produk.
     - *Numerikal*: Misalnya usia, pendapatan, harga.

3. **Pembatasan**:  
   Dataset yang sudah digunakan dalam latihan clustering (seperti customer segmentation) tidak boleh digunakan.

# **2. Import Library**

Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer, SilhouetteVisualizer
from mpl_toolkits.mplot3d import Axes3D
from sklearn.metrics import silhouette_score
from sklearn.cluster import DBSCAN
from itertools import product
import numpy as np
from collections import Counter

"""# **3. Memuat Dataset**

Pada tahap ini, Anda perlu memuat dataset ke dalam notebook. Jika dataset dalam format CSV, Anda bisa menggunakan pustaka pandas untuk membacanya. Pastikan untuk mengecek beberapa baris awal dataset untuk memahami strukturnya dan memastikan data telah dimuat dengan benar.

Jika dataset berada di Google Drive, pastikan Anda menghubungkan Google Drive ke Colab terlebih dahulu. Setelah dataset berhasil dimuat, langkah berikutnya adalah memeriksa kesesuaian data dan siap untuk dianalisis lebih lanjut.
"""

df = pd.read_csv('/content/All_Diets.csv')
df

"""# **4. Exploratory Data Analysis (EDA)**

Pada tahap ini, Anda akan melakukan **Exploratory Data Analysis (EDA)** untuk memahami karakteristik dataset. EDA bertujuan untuk:

1. **Memahami Struktur Data**
   - Tinjau jumlah baris dan kolom dalam dataset.  
   - Tinjau jenis data di setiap kolom (numerikal atau kategorikal).

2. **Menangani Data yang Hilang**  
   - Identifikasi dan analisis data yang hilang (*missing values*). Tentukan langkah-langkah yang diperlukan untuk menangani data yang hilang, seperti pengisian atau penghapusan data tersebut.

3. **Analisis Distribusi dan Korelasi**  
   - Analisis distribusi variabel numerik dengan statistik deskriptif dan visualisasi seperti histogram atau boxplot.  
   - Periksa hubungan antara variabel menggunakan matriks korelasi atau scatter plot.

4. **Visualisasi Data**  
   - Buat visualisasi dasar seperti grafik distribusi dan diagram batang untuk variabel kategorikal.  
   - Gunakan heatmap atau pairplot untuk menganalisis korelasi antar variabel.

Tujuan dari EDA adalah untuk memperoleh wawasan awal yang mendalam mengenai data dan menentukan langkah selanjutnya dalam analisis atau pemodelan.
"""

# Memahami struktur data
df.head()

df.info()

print(f"Jumlah kolom dataset: {df.columns.size} kolom.")
print(f"Jumlah baris dataset: {df.index.size} baris.")

# Menangani Data yang Hilang
print(df.isnull().sum())

df.dropna(inplace=True)
print(df.isnull().sum())

# Analisis Distribusi dan Korelasi
df.describe()

df.hist(figsize=(10, 10))
plt.show()

axes = plt.subplots(1, figsize=(10, 6))
sns.boxplot(data=df[['Protein(g)', 'Carbs(g)', 'Fat(g)']], ax=axes[1])
axes[1].set_title('Box Plot of Numerical Features')
axes[1].set_xlabel('Feature')
axes[1].set_ylabel('Value')

plt.tight_layout()
plt.show()

correlation_matrix = df.corr(numeric_only=True)

# Visualisasi Data
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Numerical Features')
plt.show()

g = sns.pairplot(df[['Protein(g)', 'Carbs(g)', 'Fat(g)']])
g.fig.suptitle('Scatter Plot of Numerical Features', y=1.08)
plt.show()

"""# **5. Data Preprocessing**

Pada tahap ini, data preprocessing adalah langkah penting untuk memastikan kualitas data sebelum digunakan dalam model machine learning. Data mentah sering kali mengandung nilai kosong, duplikasi, atau rentang nilai yang tidak konsisten, yang dapat memengaruhi kinerja model. Oleh karena itu, proses ini bertujuan untuk membersihkan dan mempersiapkan data agar analisis berjalan optimal.

Berikut adalah tahapan-tahapan yang bisa dilakukan, tetapi **tidak terbatas** pada:
1. Menghapus atau Menangani Data Kosong (Missing Values)
2. Menghapus Data Duplikat
3. Normalisasi atau Standarisasi Fitur
4. Deteksi dan Penanganan Outlier
5. Encoding Data Kategorikal
6. Binning (Pengelompokan Data)

Cukup sesuaikan dengan karakteristik data yang kamu gunakan yah.
"""

df = df.drop(columns=['Recipe_name','Extraction_day', 'Extraction_time'])

df

# Normalisasi data kategorikal
label_encoder = LabelEncoder()
df['Diet_type'] = label_encoder.fit_transform(df['Diet_type'])
df['Cuisine_type'] = label_encoder.fit_transform(df['Cuisine_type'])

# Normalisasi data numerikal
features_to_scale = ['Protein(g)', 'Carbs(g)', 'Fat(g)']
scaler = StandardScaler()

df[features_to_scale] = scaler.fit_transform(df[features_to_scale])

df.head()

"""# **6. Pembangunan Model Clustering**

## **a. Pembangunan Model Clustering**

Pada tahap ini, Anda membangun model clustering dengan memilih algoritma yang sesuai untuk mengelompokkan data berdasarkan kesamaan. Berikut adalah **rekomendasi** tahapannya.
1. Pilih algoritma clustering yang sesuai.
2. Latih model dengan data menggunakan algoritma tersebut.
"""

# Menggunakan DBSCAN untuk menghilangkan noise points
dbscan = DBSCAN(eps=0.3, min_samples=5)
clusters = dbscan.fit_predict(df)

mask = clusters != -1
df_cleaned = df[mask]
clusters_cleaned = clusters[mask]

# K means pada data yang sudah dibersihkan
kmeans = KMeans(n_clusters=3, random_state=42)
df_cleaned['Cluster'] = kmeans.fit_predict(df_cleaned)

df.head()

"""## **b. Evaluasi Model Clustering**

Untuk menentukan jumlah cluster yang optimal dalam model clustering, Anda dapat menggunakan metode Elbow atau Silhouette Score.

Metode ini membantu kita menemukan jumlah cluster yang memberikan pemisahan terbaik antar kelompok data, sehingga model yang dibangun dapat lebih efektif. Berikut adalah **rekomendasi** tahapannya.
1. Gunakan Silhouette Score dan Elbow Method untuk menentukan jumlah cluster optimal.
2. Hitung Silhouette Score sebagai ukuran kualitas cluster.
"""

silhouette_avg = silhouette_score(df_cleaned, df_cleaned['Cluster'])
print(f"Silhouette Score: {silhouette_avg}")

"""## **c. Feature Selection (Opsional)**

Silakan lakukan feature selection jika Anda membutuhkan optimasi model clustering. Jika Anda menerapkan proses ini, silakan lakukan pemodelan dan evaluasi kembali menggunakan kolom-kolom hasil feature selection. Terakhir, bandingkan hasil performa model sebelum dan sesudah menerapkan feature selection.
"""

#Type your code here

"""## **d. Visualisasi Hasil Clustering**

Setelah model clustering dilatih dan jumlah cluster optimal ditentukan, langkah selanjutnya adalah menampilkan hasil clustering melalui visualisasi.

Berikut adalah **rekomendasi** tahapannya.
1. Tampilkan hasil clustering dalam bentuk visualisasi, seperti grafik scatter plot atau 2D PCA projection.
"""

silhouette_scores = []
cluster_range = range(2, 11)

for n_clusters in cluster_range:
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    kmeans.fit(df)
    score = silhouette_score(df, kmeans.labels_)
    silhouette_scores.append(score)

plt.figure(figsize=(10, 6))
plt.plot(cluster_range, silhouette_scores, marker='o', label='Silhouette Score for various clusters')
plt.axvline(x=3, color='r', linestyle='--', label=f"Silhouette Score for 3 clusters: {silhouette_scores[0]:.2f}")
plt.title('Silhouette Score Method')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.legend()
plt.show()

visualizer = KElbowVisualizer(kmeans, k=(2,10))
visualizer.fit(df)
visualizer.show()

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
df_pca = pca.fit_transform(df)

# Predict clusters for the entire DataFrame 'df'
df['Cluster'] = kmeans.fit_predict(df) # This line adds the 'Cluster' column to 'df'

plt.figure(figsize=(8, 6))
sns.scatterplot(x=df_pca[:, 0], y=df_pca[:, 1], hue=df['Cluster'], palette='viridis')
plt.title('Clustering Result with PCA')
plt.show()

"""## **e. Analisis dan Interpretasi Hasil Cluster**

Setelah melakukan clustering, langkah selanjutnya adalah menganalisis karakteristik dari masing-masing cluster berdasarkan fitur yang tersedia.

Berikut adalah **rekomendasi** tahapannya.
1. Analisis karakteristik tiap cluster berdasarkan fitur yang tersedia (misalnya, distribusi nilai dalam cluster).
2. Berikan interpretasi: Apakah hasil clustering sesuai dengan ekspektasi dan logika bisnis? Apakah ada pola tertentu yang bisa dimanfaatkan?
"""

# Denormalisasi data kategorikal
df['Diet_type'] = label_encoder.inverse_transform(df['Diet_type'])
df['Cuisine_type'] = label_encoder.inverse_transform(df['Cuisine_type'])

# Denormalisasi data numerikal
for feature in features_to_scale:
    df[feature] = df[feature] * scaler.scale_[features_to_scale.index(feature)] + scaler.mean_[features_to_scale.index(feature)]

# Mengelompokkan data berdasarkan cluster dan menganalisis karakteristik rata-rata dari setiap cluster

cluster_summary = df.groupby('Cluster')[['Protein(g)', 'Carbs(g)', 'Fat(g)']].mean()

print("Summary of Average Features per Cluster:")
print(cluster_summary)

"""Tulis hasil interpretasinya di sini.


### **1. Cluster 0:**
**Karakteristik Asupan Makronutrien:**
- **Protein:** Rata-rata asupan protein sebesar 77.76 g, mencerminkan konsumsi protein yang moderat.  
- **Carbs (Karbohidrat):** Asupan karbohidrat rata-rata 99.75 g, berada pada tingkat sedang.  
- **Fat (Lemak):** Rata-rata asupan lemak cukup tinggi, yaitu 119.83 g.  

**Interpretasi:**  
Cluster ini kemungkinan mencerminkan individu dengan pola makan tinggi lemak dan moderat dalam protein serta karbohidrat. Hal ini dapat berkorelasi dengan karakteristik metabolik yang lebih stabil dan kebutuhan energi yang tinggi, terutama untuk individu muda dan aktif.

---

### **2. Cluster 1:**
**Karakteristik Asupan Makronutrien:**
- **Protein:** Rata-rata asupan protein 67.73 g, sedikit lebih rendah dibanding Cluster 0.  
- **Carbs (Karbohidrat):** Rata-rata asupan karbohidrat sebesar 85.91 g, lebih rendah dari Cluster 0.  
- **Fat (Lemak):** Asupan lemak rata-rata 90.43 g, lebih rendah dibandingkan Cluster 0.  

**Interpretasi:**  
Cluster ini mencerminkan individu dengan pola makan rendah protein, karbohidrat, dan lemak dibanding Cluster 0. Mungkin berkaitan dengan kelompok yang lebih kurus dan masih memiliki kontrol metabolik baik.

---

### **3. Cluster 2:**
**Karakteristik Asupan Makronutrien:**
- **Protein:** Asupan protein paling rendah di antara semua cluster, yaitu 52.00 g.  
- **Carbs (Karbohidrat):** Rata-rata karbohidrat 89.66 g, sedikit lebih tinggi dibanding Cluster 1.  
- **Fat (Lemak):** Rata-rata asupan lemak terendah, yaitu 62.75 g.  

**Interpretasi:**  
Cluster ini menggambarkan pola makan yang rendah dalam semua makronutrien, berpotensi mencerminkan kelompok yang kurus dengan kebutuhan energi rendah. Hal ini mungkin terkait dengan individu yang lebih tua atau kurang aktif secara fisik.

---

### **4. Cluster 3:**
**Karakteristik Asupan Makronutrien:**
- **Protein:** Rata-rata asupan protein tertinggi di antara semua cluster, yaitu 96.75 g.  
- **Carbs (Karbohidrat):** Karbohidrat juga paling tinggi, yaitu 107.91 g.  
- **Fat (Lemak):** Asupan lemak tertinggi, sebesar 131.12 g.  

**Interpretasi:**  
Cluster ini mencerminkan individu dengan pola makan tinggi protein, karbohidrat, dan lemak. Mungkin menggambarkan kelompok dengan risiko metabolik lebih tinggi akibat konsumsi makronutrien yang tinggi, yang sesuai dengan karakteristik metabolik cluster ini. Intervensi berupa pola makan seimbang dan pengurangan asupan lemak mungkin diperlukan.

---

# **7. Mengeksport Data**

Simpan hasilnya ke dalam file CSV.
"""

df.to_csv('hasil_clustering.csv', index=False)