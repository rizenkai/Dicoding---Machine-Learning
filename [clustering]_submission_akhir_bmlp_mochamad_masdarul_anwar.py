# -*- coding: utf-8 -*-
"""[Clustering] Submission Akhir BMLP_Mochamad Masdarul Anwar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NoO5cRAERJiWCoWnsyGnQcTatxbLIlCI

# **1. Perkenalan Dataset**

Tahap pertama, Anda harus mencari dan menggunakan dataset **tanpa label** dengan ketentuan sebagai berikut:

1. **Sumber Dataset**:  
   Dataset dapat diperoleh dari berbagai sumber, seperti public repositories (*Kaggle*, *UCI ML Repository*, *Open Data*) atau data primer yang Anda kumpulkan sendiri.
   
2. **Ketentuan Dataset**:
   - **Tanpa label**: Dataset tidak boleh memiliki label atau kelas.
   - **Jumlah Baris**: Minimal 1000 baris untuk memastikan dataset cukup besar untuk analisis yang bermakna.
   - **Tipe Data**: Harus mengandung data **kategorikal** dan **numerikal**.
     - *Kategorikal*: Misalnya jenis kelamin, kategori produk.
     - *Numerikal*: Misalnya usia, pendapatan, harga.

3. **Pembatasan**:  
   Dataset yang sudah digunakan dalam latihan clustering (seperti customer segmentation) tidak boleh digunakan.

# **2. Import Library**

Pada tahap ini, Anda perlu mengimpor beberapa pustaka (library) Python yang dibutuhkan untuk analisis data dan pembangunan model machine learning.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.metrics import silhouette_score
from sklearn.decomposition import PCA
from yellowbrick.cluster import KElbowVisualizer, SilhouetteVisualizer

"""# **3. Memuat Dataset**

Pada tahap ini, Anda perlu memuat dataset ke dalam notebook. Jika dataset dalam format CSV, Anda bisa menggunakan pustaka pandas untuk membacanya. Pastikan untuk mengecek beberapa baris awal dataset untuk memahami strukturnya dan memastikan data telah dimuat dengan benar.

Jika dataset berada di Google Drive, pastikan Anda menghubungkan Google Drive ke Colab terlebih dahulu. Setelah dataset berhasil dimuat, langkah berikutnya adalah memeriksa kesesuaian data dan siap untuk dianalisis lebih lanjut.
"""

df = pd.read_csv('/content/Dataset of Diabetes .csv')
df

"""# **4. Exploratory Data Analysis (EDA)**

Pada tahap ini, Anda akan melakukan **Exploratory Data Analysis (EDA)** untuk memahami karakteristik dataset. EDA bertujuan untuk:

1. **Memahami Struktur Data**
   - Tinjau jumlah baris dan kolom dalam dataset.  
   - Tinjau jenis data di setiap kolom (numerikal atau kategorikal).

2. **Menangani Data yang Hilang**  
   - Identifikasi dan analisis data yang hilang (*missing values*). Tentukan langkah-langkah yang diperlukan untuk menangani data yang hilang, seperti pengisian atau penghapusan data tersebut.

3. **Analisis Distribusi dan Korelasi**  
   - Analisis distribusi variabel numerik dengan statistik deskriptif dan visualisasi seperti histogram atau boxplot.  
   - Periksa hubungan antara variabel menggunakan matriks korelasi atau scatter plot.

4. **Visualisasi Data**  
   - Buat visualisasi dasar seperti grafik distribusi dan diagram batang untuk variabel kategorikal.  
   - Gunakan heatmap atau pairplot untuk menganalisis korelasi antar variabel.

Tujuan dari EDA adalah untuk memperoleh wawasan awal yang mendalam mengenai data dan menentukan langkah selanjutnya dalam analisis atau pemodelan.
"""

# Memahami struktur data
df.head()

df.info()

print(f"Jumlah kolom dataset: {df.columns.size} kolom.")
print(f"Jumlah baris dataset: {df.index.size} baris.")

# Menangani Data yang Hilang
print(df.isnull().sum())

df.dropna(inplace=True)
print(df.isnull().sum())

# Analisis Distribusi dan Korelasi
df.describe()

df.hist(figsize=(10, 10))
plt.show()

numeric_columns = ['AGE', 'Urea', 'Cr', 'HbA1c', 'Chol', 'TG', 'HDL', 'LDL', 'VLDL', 'BMI']
df[numeric_columns].plot(kind='box', subplots=True, layout=(4, 3), figsize=(12, 10))
plt.tight_layout()
plt.show()

correlation_matrix = df.corr(numeric_only=True)

# Visualisasi Data
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix of Numerical Features')
plt.show()

plt.figure(figsize=(10, 8))
sns.scatterplot(x='AGE', y='BMI', data=df)
plt.title('Scatter Plot of AGE vs BMI')
plt.xlabel('AGE')
plt.ylabel('BMI')
plt.show()

df.hist(figsize=(10, 10))
plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=df[['AGE', 'Urea', 'BMI']])
plt.title('Box Plot of AGE, Urea, and BMI')
plt.show()

selected_columns = ['AGE', 'Urea', 'BMI']

sns.pairplot(df[selected_columns])
plt.show()

"""# **5. Data Preprocessing**

Pada tahap ini, data preprocessing adalah langkah penting untuk memastikan kualitas data sebelum digunakan dalam model machine learning. Data mentah sering kali mengandung nilai kosong, duplikasi, atau rentang nilai yang tidak konsisten, yang dapat memengaruhi kinerja model. Oleh karena itu, proses ini bertujuan untuk membersihkan dan mempersiapkan data agar analisis berjalan optimal.

Berikut adalah tahapan-tahapan yang bisa dilakukan, tetapi **tidak terbatas** pada:
1. Menghapus atau Menangani Data Kosong (Missing Values)
2. Menghapus Data Duplikat
3. Normalisasi atau Standarisasi Fitur
4. Deteksi dan Penanganan Outlier
5. Encoding Data Kategorikal
6. Binning (Pengelompokan Data)

Cukup sesuaikan dengan karakteristik data yang kamu gunakan yah.
"""

label_encoder = LabelEncoder()

df['Gender'] = label_encoder.fit_transform(df['Gender'])
df['CLASS'] = label_encoder.fit_transform(df['CLASS'])

features_to_scale = ['AGE', 'Urea', 'Cr', 'HbA1c', 'BMI']
scaler = StandardScaler()

df[features_to_scale] = scaler.fit_transform(df[features_to_scale])

df.head()

"""# **6. Pembangunan Model Clustering**

## **a. Pembangunan Model Clustering**

Pada tahap ini, Anda membangun model clustering dengan memilih algoritma yang sesuai untuk mengelompokkan data berdasarkan kesamaan. Berikut adalah **rekomendasi** tahapannya.
1. Pilih algoritma clustering yang sesuai.
2. Latih model dengan data menggunakan algoritma tersebut.
"""

kmeans = KMeans(n_clusters=3, random_state=42)

kmeans.fit(df)
df['Cluster'] = kmeans.labels_

df.head()

"""## **b. Evaluasi Model Clustering**

Untuk menentukan jumlah cluster yang optimal dalam model clustering, Anda dapat menggunakan metode Elbow atau Silhouette Score.

Metode ini membantu kita menemukan jumlah cluster yang memberikan pemisahan terbaik antar kelompok data, sehingga model yang dibangun dapat lebih efektif. Berikut adalah **rekomendasi** tahapannya.
1. Gunakan Silhouette Score dan Elbow Method untuk menentukan jumlah cluster optimal.
2. Hitung Silhouette Score sebagai ukuran kualitas cluster.
"""

silhouette_avg = silhouette_score(df, kmeans.labels_)
print(f"Silhouette Score: {silhouette_avg}")

"""## **c. Feature Selection (Opsional)**

Silakan lakukan feature selection jika Anda membutuhkan optimasi model clustering. Jika Anda menerapkan proses ini, silakan lakukan pemodelan dan evaluasi kembali menggunakan kolom-kolom hasil feature selection. Terakhir, bandingkan hasil performa model sebelum dan sesudah menerapkan feature selection.
"""

#Type your code here

"""## **d. Visualisasi Hasil Clustering**

Setelah model clustering dilatih dan jumlah cluster optimal ditentukan, langkah selanjutnya adalah menampilkan hasil clustering melalui visualisasi.

Berikut adalah **rekomendasi** tahapannya.
1. Tampilkan hasil clustering dalam bentuk visualisasi, seperti grafik scatter plot atau 2D PCA projection.
"""

silhouette_scores = []

for n_clusters in cluster_range:
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    kmeans.fit(df)
    score = silhouette_score(df, kmeans.labels_)
    silhouette_scores.append(score)

plt.figure(figsize=(10, 6))
plt.plot(cluster_range, silhouette_scores, marker='o', label='Silhouette Score for various clusters')
plt.axvline(x=3, color='r', linestyle='--', label=f"Silhouette Score for 3 clusters: {silhouette_scores[0]:.2f}")
plt.title('Silhouette Score Method')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Score')
plt.legend()
plt.show()

visualizer = KElbowVisualizer(kmeans, k=(2,10))
visualizer.fit(df)
visualizer.show()

pca = PCA(n_components=2)
df_pca = pca.fit_transform(df)
plt.figure(figsize=(8, 6))
sns.scatterplot(x=df_pca[:, 0], y=df_pca[:, 1], hue=df['Cluster'], palette='viridis')
plt.title('Clustering Result with PCA')
plt.show()

"""## **e. Analisis dan Interpretasi Hasil Cluster**

Setelah melakukan clustering, langkah selanjutnya adalah menganalisis karakteristik dari masing-masing cluster berdasarkan fitur yang tersedia.

Berikut adalah **rekomendasi** tahapannya.
1. Analisis karakteristik tiap cluster berdasarkan fitur yang tersedia (misalnya, distribusi nilai dalam cluster).
2. Berikan interpretasi: Apakah hasil clustering sesuai dengan ekspektasi dan logika bisnis? Apakah ada pola tertentu yang bisa dimanfaatkan?
"""

for class_label in df['CLASS'].unique():
    class_data = df[df['CLASS'] == class_label]
    print(f"\nKarakteristik CLASS {class_label}:")
    print(class_data.describe())  # Statistik deskriptif

    # Contoh analisis tambahan
    print(f"Rata-rata BMI di CLASS {class_label}: {class_data['BMI'].mean()}")

"""Tulis hasil interpretasinya di sini.
1. Cluster 1:
<p> Karakteristik Utama:
<p>AGE: Rata-rata usia negatif (-1.05) menunjukkan kelompok ini cenderung lebih muda.
<p>Urea: Rata-rata sedikit di bawah nol (-0.16), menunjukkan fungsi ginjal yang relatif stabil.
<p>Cr (Kreatinin): Rata-rata mendekati nol (-0.11), mengindikasikan kesehatan ginjal yang baik.
<p>HbA1c: Nilai rata-rata rendah (-1.47), menunjukkan kontrol glukosa yang sangat baik.
<p>Chol (Kolesterol): Rata-rata cukup tinggi (4.27), tetapi masih dalam rentang normal.
<p>BMI: Rata-rata sangat rendah (-1.46), mengindikasikan kelompok ini cenderung kurus.
<p>Interpretasi: CLASS 0 merepresentasikan individu dengan kesehatan metabolik baik, usia muda, dan kemungkinan pola hidup aktif. Potensi risiko metabolik rendah.
2. Cluster 2:
<p>Karakteristik Utama:
<p>AGE: Usia sedikit lebih tua dibanding CLASS 1 (-1.16).
<p>HbA1c: Lebih tinggi dari CLASS 0 dan CLASS 1 (-0.90), tetapi masih dalam kontrol glukosa yang cukup baik.
<p>BMI: Rata-rata lebih tinggi dibanding CLASS 1 (-1.14), tetapi tetap kurus.
<p>Kolesterol dan TG: Lebih tinggi dari CLASS 0 dan CLASS 1, menunjukkan sedikit risiko metabolik lebih tinggi.
<p>Interpretasi: CLASS 2 mencerminkan individu yang lebih tua dengan kontrol glukosa cukup baik namun dengan potensi risiko kolesterol lebih tinggi.
3. Cluster 3:
  <p>Karakteristik Utama:
<p>AGE: Usia rata-rata positif (0.21), menunjukkan kelompok ini terdiri dari individu dewasa.
<p>HbA1c: Positif (0.24), mengindikasikan kontrol glukosa yang kurang baik dibandingkan kelas lain.
<p>Kolesterol dan TG: Rata-rata tinggi (4.96 dan 2.46), mencerminkan risiko metabolik lebih besar.
<p>BMI: Mendekati normal (0.25), mengindikasikan kelompok ini berada di kategori berat badan ideal.
<p>Interpretasi: CLASS 3 mencakup individu dewasa dengan risiko metabolik lebih tinggi. Intervensi kesehatan diperlukan untuk menurunkan kadar gula darah dan kolesterol.

# **7. Mengeksport Data**

Simpan hasilnya ke dalam file CSV.
"""

df.to_csv('hasil_clustering.csv', index=False)